package com.lixm.notes.content_providerimport android.annotation.SuppressLintimport android.app.Activityimport android.content.Intentimport android.database.Cursorimport android.graphics.Bitmapimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Bundleimport android.os.ParcelFileDescriptorimport android.provider.DocumentsContractimport android.provider.OpenableColumnsimport android.util.Logimport android.view.Viewimport androidx.appcompat.app.AppCompatActivityimport com.lixm.notes.Rimport java.io.*class FileSearchActivity : AppCompatActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_file_search)    }    fun fileSearch(view:View){        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {            addCategory(Intent.CATEGORY_OPENABLE)            type = "image/*"        }        startActivityForResult(intent, Companion.READ_REQUEST_CODE)    }    companion object {        private const val READ_REQUEST_CODE: Int = 42        private const val WRITE_REQUEST_CODE: Int = 43        private const val EDIT_REQUEST_CODE: Int = 44    }    @SuppressLint("MissingSuperCall")    override fun onActivityResult(requestCode: Int, resultCode: Int, resultData: Intent?) {        if(requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK){            resultData?.data?.also {uri ->                Log.d("xxx","Uri:$uri")//                showImage(uri)//                dumpImageMetaData(uri)////                var uriTextValue = readTextFromUri(uri)//                Log.d("xxx","uriTextValue:$uriTextValue")            }        }    }    fun dumpImageMetaData(uri: Uri){        val cursor: Cursor? = contentResolver.query(uri,null,null,null,null,null)        cursor?.use {            if(it.moveToFirst()){                val displayName: String = it.getString(it.getColumnIndex(OpenableColumns.DISPLAY_NAME))                Log.d("xxx","displayName:$displayName")                val sizeIndex: Int = it.getColumnIndex(OpenableColumns.SIZE)                val size: String = if(!it.isNull(sizeIndex)){                    it.getString(sizeIndex)                }else{                    "Unknown"                }                Log.d("xxx","size:$size")            }        }    }    @Throws(IOException::class)    private fun getBitmapFromUri(uri: Uri):Bitmap{        val parcelFileDescriptor: ParcelFileDescriptor = contentResolver.openFileDescriptor(uri,"r")        val fileDescriptor: FileDescriptor = parcelFileDescriptor.fileDescriptor        val image: Bitmap = BitmapFactory.decodeFileDescriptor(fileDescriptor)        parcelFileDescriptor.close()        return image    }    @Throws(IOException::class)    private fun readTextFromUri(uri: Uri):String{        val stringBuilder = StringBuffer()        contentResolver.openInputStream(uri)?.use{inputSteam ->            BufferedReader(InputStreamReader(inputSteam)).use{reader ->                var line: String? = reader.readLine()                while (line != null){                    stringBuilder.append(line)                    line = reader.readLine()                }            }        }        return stringBuilder.toString();    }    private fun crateFile(mineType: String,fileName:String){        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {            addCategory(Intent.CATEGORY_OPENABLE)            type = mineType            putExtra(Intent.EXTRA_TITLE,fileName)        }        startActivityForResult(intent,WRITE_REQUEST_CODE)    }    private fun deleteDocument(uri: Uri){        DocumentsContract.deleteDocument(contentResolver,uri)    }    private fun editDoucment(){        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {            addCategory(Intent.CATEGORY_OPENABLE)            type = "text/plain"        }        startActivityForResult(intent,EDIT_REQUEST_CODE)    }    private fun alterDocument(uri: Uri){        try {            contentResolver.openFileDescriptor(uri,"w")?.use{                FileOutputStream(it.fileDescriptor).use {                    it.write(("hello world").toByteArray())                }            }        }catch (e: FileNotFoundException){            e.printStackTrace()        }catch (e: IOException){            e.printStackTrace()        }    }    private fun isVirtualFile(uri: Uri):Boolean{        if(!DocumentsContract.isDocumentUri(this,uri)){            return false        }        val cursor: Cursor? = contentResolver.query(uri, arrayOf(DocumentsContract.Document.COLUMN_FLAGS),            null,            null,            null)        val flags: Int = cursor?.use {            if(cursor.moveToFirst()){                cursor.getInt(0)            }else{                0            }        }?: 0        return flags and DocumentsContract.Document.FLAG_VIRTUAL_DOCUMENT != 0    }    private fun getInputSteamForVirtualFile(uri: Uri,mineTypeFilter: String): InputStream{        val openableMimeTypes: Array<String>? = contentResolver.getStreamTypes(uri,mineTypeFilter)        return if(openableMimeTypes?.isNotEmpty() == true){            contentResolver.openTypedAssetFileDescriptor(uri,openableMimeTypes[0],null)                .createInputStream()        }else{            throw FileNotFoundException()        }    }}