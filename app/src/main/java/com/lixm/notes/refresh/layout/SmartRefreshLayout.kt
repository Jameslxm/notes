package com.lixm.notes.refresh.layoutimport android.content.Contextimport android.util.AttributeSetimport android.view.Viewimport android.view.ViewGroupimport com.lixm.notes.Rimport com.lixm.notes.refresh.api.RefreshComponentimport com.lixm.notes.refresh.api.RefreshContentimport com.lixm.notes.refresh.wrapper.RefreshContentWrapper/** * Desc * Author xm li * Date :2020/12/17 */open class SmartRefreshLayout @JvmOverloads constructor(    context: Context?,    attrs: AttributeSet? = null,    defStyleAttr: Int = 0) : ViewGroup(context,attrs,defStyleAttr){    var mRefreshHeader: RefreshComponent? = null //下拉头部视图    var mRefreshFooter: RefreshComponent? = null //上拉底部视图    var mRefreshContent: RefreshContent? = null//显示内容视图    var sDefaultMarginLP = MarginLayoutParams(-1,-1)    override fun onAttachedToWindow() {        super.onAttachedToWindow()        if(mRefreshContent == null){            for(i in 0 until childCount ){                var view = getChildAt(i)                if((mRefreshHeader == null || view != mRefreshHeader?.getView())                    && (mRefreshFooter == null || view != mRefreshFooter?.getView())){                    mRefreshContent = RefreshContentWrapper(view)                }            }        }    }    /**     *     */    override fun onFinishInflate() {        super.onFinishInflate()    }    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {        var minimumWidth = 0        var minimumHeight = 0        val thisView = this        for (i in 0 until super.getChildCount()){            var child = super.getChildAt(i)            if(child.visibility == View.GONE || "GONE".equals(child.getTag(R.id.srl_tag))){                continue            }            if(mRefreshContent != null && mRefreshContent!!.getView() === child){                val contentView = mRefreshContent?.getView()                var lp = contentView?.layoutParams?:return                val mlp : MarginLayoutParams = if(lp is MarginLayoutParams) lp as MarginLayoutParams else sDefaultMarginLP                var widthSpec = getChildMeasureSpec(widthMeasureSpec,thisView.paddingLeft + thisView.paddingRight + mlp.leftMargin + mlp.rightMargin,lp.width)                val heightSpec = getChildMeasureSpec(heightMeasureSpec,thisView.paddingTop+thisView.paddingBottom + mlp.topMargin + mlp.bottomMargin,lp.height)                contentView?.measure(widthSpec,heightSpec)                minimumWidth += contentView.measuredWidth + mlp.leftMargin + mlp.rightMargin                minimumHeight += contentView.measuredHeight + mlp.topMargin + mlp.bottomMargin            }        }        minimumWidth += thisView.paddingLeft + thisView.paddingRight        minimumHeight += thisView.paddingTop + thisView.paddingBottom        super.setMeasuredDimension(View.resolveSize(Math.max(minimumWidth,super.getSuggestedMinimumWidth()),widthMeasureSpec),            View.resolveSize(Math.max(minimumHeight,super.getSuggestedMinimumHeight()),heightMeasureSpec))    }    override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {        val thisView: View = this        val paddingLeft: Int = thisView.paddingLeft        val paddingTop: Int = thisView.paddingTop        val paddingBottom: Int = thisView.paddingBottom        for(i in 0 until super.getChildCount()){//不包括尾            var child: View? = super.getChildAt(i)            if(child?.visibility == View.GONE || "GONE".equals(child?.getTag(R.id.srl_tag))){                continue            }            val contentView = mRefreshContent?.getView() ?: return            val lp = contentView?.layoutParams            val mlp : MarginLayoutParams = if(lp is MarginLayoutParams) lp as MarginLayoutParams else sDefaultMarginLP            var left : Int = paddingLeft + mlp.leftMargin            var top : Int = paddingTop + mlp.topMargin            var right: Int = left + contentView.measuredWidth            var bottom : Int = top + contentView.measuredHeight            contentView.layout(left,top,right,bottom)        }    }}