package com.lixm.notes.work_managerimport android.app.Applicationimport android.net.Uriimport androidx.lifecycle.AndroidViewModelimport androidx.lifecycle.LiveDataimport androidx.work.*class BlurViewWorker (application: Application): AndroidViewModel(application){    internal var imageUri: Uri? = null    private val workManager: WorkManager = WorkManager.getInstance(application)    internal val outputWorkInfo: LiveData<List<WorkInfo>>    init {        outputWorkInfo = workManager.getWorkInfosByTagLiveData(TAG_OUTPUT)    }    internal fun applyBlur(blurLevel: Int){        var continuation = workManager            .beginWith(OneTimeWorkRequest.from(CleanupWorker::class.java))        for(i in 0 until blurLevel){            val blurBuilder = OneTimeWorkRequestBuilder<BlurWorker>()            if(i == 0){                blurBuilder.setInputData(createInputDataForUri())            }            continuation = continuation.then(blurBuilder.build())        }        val constraints = Constraints.Builder()            .setRequiresCharging(true)            .build()        val save = OneTimeWorkRequestBuilder<SaveImageToFileWorker>()            .setConstraints(constraints)            .addTag(TAG_OUTPUT)            .build()        continuation = continuation.then(save)        continuation.enqueue()    }    private fun createInputDataForUri(): Data {        val builder = Data.Builder()        imageUri?.let {            builder.putString(KEY_IMAGE_URI,imageUri.toString())        }        return builder.build()    }    private fun uriOrNull(uriString: String?): Uri?{        return if(!uriString.isNullOrEmpty()){            Uri.parse(uriString)        }else{            null        }    }    internal fun setImageUri(uri: String?){        imageUri = uriOrNull(uri)    }}