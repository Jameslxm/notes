package com.lixm.notes.picimport android.Manifestimport android.R.attr.targetSdkVersionimport android.app.Activityimport android.content.Intentimport android.content.pm.PackageManagerimport android.media.ExifInterfaceimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.text.TextUtilsimport android.util.Logimport androidx.appcompat.app.AppCompatActivityimport androidx.core.app.ActivityCompatimport androidx.core.content.ContextCompatimport androidx.core.content.FileProviderimport com.lixm.notes.Rimport kotlinx.android.synthetic.main.activity_pic.*import java.io.File/** * Desc * Author xm li * Date :2020/12/16 */class PicActivity : AppCompatActivity() {    private var cameraFile : File? = null    var PermissionString = arrayOf<String>(        Manifest.permission.READ_EXTERNAL_STORAGE,        Manifest.permission.WRITE_EXTERNAL_STORAGE,        Manifest.permission.CAMERA    )    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_pic)        tv_take_photo.setOnClickListener {            takePhoto()        }        tv_pic_position.setOnClickListener {            getPhotoLocation("/storage/emulated/0/note/CameraImage/test_20201217_142822.jpeg")        }    }    private fun takePhoto() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            //Build.VERSION.SDK_INT是获取当前手机版本 Build.VERSION_CODES.M为6.0系统            //如果系统>=6.0            if (targetSdkVersion >= Build.VERSION_CODES.M) {                //第 1 步: 检查是否有相应的权限                val isAllGranted: Boolean = checkPermissionAllGranted(PermissionString)                if (isAllGranted) {                    realTakePhoto()                    return                }                // 一次请求多个权限, 如果其他有权限是已经授予的将会自动忽略掉                ActivityCompat.requestPermissions(                    this,                    PermissionString, 1                )            }        }    }    private fun realTakePhoto() {        cameraFile = FileUtils.createCameraFile(this)        if(cameraFile != null) {            val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)            val pothoUri =                FileProvider.getUriForFile(this, "com.lixm.notes.fileprovider", cameraFile!!)            intent.putExtra(MediaStore.EXTRA_OUTPUT, pothoUri)            startActivityForResult(intent, 3000)        }    }    /**     * 检查是否拥有指定的所有权限     */    private fun checkPermissionAllGranted(permissions: Array<String>): Boolean {        for (permission in permissions) {            if (ContextCompat.checkSelfPermission(                    this,                    permission                ) != PackageManager.PERMISSION_GRANTED            ) {                return false            }        }        return true    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        if (requestCode === 1) {            var isAllGranted = true            // 判断是否所有的权限都已经授予了            for (grant in grantResults) {                if (grant != PackageManager.PERMISSION_GRANTED) {                    isAllGranted = false                    break                }            }            if (isAllGranted) {                // 所有的权限都授予了                realTakePhoto()            } else {                // 弹出对话框告诉用户需要权限的原因, 并引导用户去应用权限管理中手动打开权限按钮                //容易判断错                //MyDialog("提示", "某些权限未开启,请手动开启", 1) ;            }        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if(resultCode !== Activity.RESULT_OK) return        if(requestCode == 3000){            Log.d("debug","==>${cameraFile?.absolutePath}")            getPhotoLocation(cameraFile?.absolutePath)        }    }    fun getPhotoLocation(imagePath: String?){        if(TextUtils.isEmpty(imagePath)){            return        }        var exifInterface = ExifInterface(imagePath)        var latValue = exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE)        var lngValue = exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE)        var latRef = exifInterface.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF)        var lngRef = exifInterface.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF)        Log.d("debug","==>lngValue:${lngValue};" + "latRef:${latRef}")        var output1 = convertRationalLatLonToFloat(latValue, latRef)        var output2 = convertRationalLatLonToFloat(lngValue, lngRef)        Log.d("debug","==>lat${output1}" + "==>${output2}")    }    fun convertRationalLatLonToFloat(rationalString: String,ref: String) : Float{        val parts = rationalString.split(",")        var pair: Array<String>        pair = parts[0].split("/").toTypedArray()        val degrees =            pair[0].trim { it <= ' ' }.toDouble() / pair[1].trim { it <= ' ' }                .toDouble()        pair = parts[1].split("/").toTypedArray()        val minutes =            pair[0].trim { it <= ' ' }.toDouble() / pair[1].trim { it <= ' ' }                .toDouble()        pair = parts[2].split("/").toTypedArray()        val seconds =            pair[0].trim { it <= ' ' }.toDouble() / pair[1].trim { it <= ' ' }                .toDouble()        val result = degrees + minutes / 60.0 + seconds / 3600.0        return if (ref.equals("S") || ref.equals("W")) {            (-result).toFloat()        } else result.toFloat()    }    ///storage/emulated/0/note/CameraImage/test_20201217_142821.jpeg    //lat23.180103==>113.33083}