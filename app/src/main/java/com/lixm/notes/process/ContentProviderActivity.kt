package com.lixm.notes.processimport android.content.ContentValuesimport android.database.Cursorimport android.net.Uriimport android.os.Bundleimport android.provider.UserDictionaryimport android.view.Viewimport androidx.appcompat.app.AppCompatActivityimport com.lixm.notes.Rimport kotlinx.android.synthetic.main.activity_content_provider.*class ContentProviderActivity : AppCompatActivity(){    private lateinit var selectionArgs: Array<String>    private lateinit var selectionClause: String    private lateinit var mCursor: Cursor    private lateinit var newUri: Uri    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_content_provider)    }    fun queries(view: View){        var searchString = searchWord.text.toString()        selectionArgs = searchString?.takeIf { it.isNotEmpty() }?.let {            selectionClause = "${UserDictionary.Words.WORD} = ?"            arrayOf(it)        }?:kotlin.run {//            selectionClause = null            emptyArray<String>()        }//        mCursor = contentResolver.query(//            UserDictionary.Words.CONTENT_URI,//            projections,//            selectionClause,//            selectionArgs.toTypeArray(),//            sortOrder//        )//        when(mCursor?.count){//            null ->{////            }//            0 ->{////            }//            else ->{////            }//        }    }    fun insertWord(view: View){        val newValues = ContentValues().apply {            put(UserDictionary.Words.APP_ID,"example.user")            put(UserDictionary.Words.LOCALE,"en_US")            put(UserDictionary.Words.WORD,"insert")            put(UserDictionary.Words.FREQUENCY,"100")        }        newUri = contentResolver.insert(UserDictionary.Words.CONTENT_URI,newValues)    }    fun updateWord(view: View){        val updateValues = ContentValues().apply {            putNull(UserDictionary.Words.LOCALE)        }        val selectionClause: String = UserDictionary.Words.LOCALE + "LIKE ?"        val selectionArgs: Array<String> = arrayOf("en_%")        var rowsUpdated: Int = 0        rowsUpdated = contentResolver.update(            UserDictionary.Words.CONTENT_URI,            updateValues,            selectionClause,            selectionArgs        )    }    fun deleteWord(view: View){        val selectionClause = "${UserDictionary.Words.LOCALE} LIKE ?"        val selectionArgs: Array<String> = arrayOf("user")        var rowsDeleted: Int = 0        rowsDeleted = contentResolver.delete(            UserDictionary.Words.CONTENT_URI,            selectionClause,            selectionArgs        )    }}