package com.lixm.notes.eventlib/** * Desc * Author xm li * Date :2021/3/20 */class ViewGroup : View {    var childList: MutableList<View> = ArrayList()    var mChildren = arrayOfNulls<View>(0)    var mFirstTouchTarget: TouchTarget? = null    constructor(left: Int, top: Int, right: Int, bottom: Int) : super(left, top, right, bottom)    fun addView(view: View) {        if (view == null) {            return        }        childList.add(view)        mChildren = childList.toTypedArray()    }    override fun dispatchTouchEvent(event: MotionEvent): Boolean {        System.out.println("${name} ViewGroup dispatchTouchEvent")        var actionMasked = event.actionMasked        var intercept = onInterceptTouchEvent(event)        var handle = false        var newTouchTarget: TouchTarget? = null        if (actionMasked != MotionEvent.ACTION_CANCEL && !intercept) {            if (actionMasked == MotionEvent.ACTION_DOWN) {                var mChildrenResult = mChildren.reversed()                run loop@{                    mChildrenResult.forEachIndexed { index, child ->                        if(child == null) return@forEachIndexed                        if (!child.isContain(event.x, event.y)) {                            return@forEachIndexed                        }                        if(dispatchTransformedTouchEvent(event,child)){                            handle = true                            newTouchTarget = addTouchTarget(child)                            return@loop                        }                    }                }            }        }        if(mFirstTouchTarget == null){            handle = dispatchTransformedTouchEvent(event, null)        }        return handle    }    private fun addTouchTarget(child: View): TouchTarget? {        var target: TouchTarget? = TouchTarget().obtain(child)        target?.next = mFirstTouchTarget        mFirstTouchTarget = target        return target    }    private fun dispatchTransformedTouchEvent(event: MotionEvent, child: View?): Boolean {        var handled = false        if(child != null){            handled = child.dispatchTouchEvent(event)        }else{            handled = super.dispatchTouchEvent(event)        }        return handled    }    private fun onInterceptTouchEvent(event: MotionEvent): Boolean {        return false    }    class TouchTarget {        var child: View? = null        var sRecycleBin: TouchTarget? = null        var sRecycleCount: Int = 0        var next: TouchTarget? = null        var sRecycleLock = arrayOfNulls<Any>(0)        fun obtain(child: View): TouchTarget? {            var target: TouchTarget? = null            synchronized(sRecycleLock) {                if (sRecycleBin == null) {                    target = TouchTarget()                } else {                    target = sRecycleBin                }                sRecycleBin = target?.next                sRecycleCount--                target?.next = null            }            target?.child = child            return target        }        fun recycle() {            if (child == null) {                throw IllegalStateException("已经被回收过了")            }            synchronized(sRecycleLock) {                if (sRecycleCount < 32) {                    next = sRecycleBin                    sRecycleBin = this                    sRecycleCount++                }            }        }    }}