package com.lixm.notes.kotlinimport org.junit.Testclass KotlinTest {    @Test    fun main(){//        InitOrderDemo("hello")//        Customer("hello").writeUpper()//        Constructors(1)//        Square().draw()////        val list = mutableListOf(1,2,3)//        list.swap(0,2)//        open class Shape//        class Rectangle: Shape()//        fun Shape.getName() = "Shape"//        fun Rectangle.getName() = "Rectangle"//        fun printClassName(s: Shape){//            println(s.getName())//        }//        printClassName(Rectangle())//        class Example{//            fun printFunctionType(){//                println("Class method")//            }////        }//        fun Example.printFunctionType(i: Int){//            println("Extension function")//        }//        Example().printFunctionType(1)//        fun Any?.toString():String{//            if(this == null) return "null"//            return toString()////        }//        val list = listOf("red","green","blue")//        list.getLongestString()        Connection(Host("kotl.in"),433).connect()    }    class MyClass{        companion object{}    }    fun MyClass.Companion.printCompanion(){        println("companion")    }    val <T> List<T>.lastIndex: Int        get() = size -1    fun<T> MutableList<T>.swap(index1: Int,index2: Int){        val tmp = this[index1]        this[index1] = this[index2]        this[index2] = tmp    }    class Host(val hostname: String){        fun printHostname(){            print(hostname)        }        override fun toString(): String {            return "host"        }    }    class Connection(val host: Host,val port: Int){        override fun toString(): String {            return "connection"        }        fun printPort(){            print(port)        }        fun Host.printConnectionsString(p: Int){            println(toString())            println(this@Connection.toString())            printHostname()            print(":")            printPort()        }        fun connect(){            host.printConnectionsString(port)        }    }}