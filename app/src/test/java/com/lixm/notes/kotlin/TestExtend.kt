package com.lixm.notes.kotlinimport org.junit.Testclass TestExtend {    @Test    fun testExtend(){        val list = mutableListOf(1,2,3)        list.swap(0,2)        println(list)    }    fun <T> MutableList<T>.swap(index1: Int,index2: Int){        var tmp = this[index1]        this[index1] = this[index2]        this[index2] = tmp    }    @Test    fun testExtend2(){        open class Shape        class Rectangle : Shape()        fun Shape.getName() = "Shape"        fun Rectangle.getName() = "Rectangle"        fun printClassName(s : Shape){            println(s.getName())        }        printClassName(Rectangle())    }    @Test    fun testExtend3(){        class Example{            fun printFunctionType(){                println("class method")            }        }        fun Example.printFunctionType(){            println("Extension function")        }        Example().printFunctionType()    }    @Test    fun testExtend4(){        class Example{            fun printFunctionType(){                println("class method")            }        }        fun Example.printFunctionType(i: Int){            println("Extension function")        }        Example().printFunctionType(1)    }    @Test    fun testProperty(){        val list = mutableListOf(1,2,3)        println(list.lastIndex)    }    @Test    fun testListExtend(){        val list = listOf("red","green","blue")        list.getLongestString2()    }    @Test    fun testExtend5(){        BaseCaller().call(Base())        DerivedCaller().call(Base())        DerivedCaller().call(Derived())    }}